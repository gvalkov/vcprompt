#!/usr/bin/env python
"""
Usage: vcprompt [options]

Version control information in your prompt.

Options:
  -f, --format FORMAT        The format string to use.
  -p, --path PATH            The path to run vcprompt on.
  -d, --max-depth DEPTH      The maximum number of directories to traverse.
  -s, --systems SYSTEMS      The version control systems to use.
  -u, --unknown UNKNOWN      The "unknown" value.
  -v, --version              Show program's version number and exit
  -h, --help                 Show this help message and exit
  -t, --help-format          Show placeholder help and exit

VCS-specific formatting:
  These options can be used for VCS-specific prompt formatting.

  --format-bzr FORMAT        Bazaar
  --format-cvs FORMAT        CVS
  --format-darcs FORMAT      Darcs
  --format-fossil FORMAT     Fossil
  --format-git FORMAT        Git
  --format-hg FORMAT         Mercurial
  --format-svn FORMAT        Subversion
"""

import optparse
import os
import re
import sys

from subprocess import call, Popen, PIPE

# deferred imports
sqlite3 = None
parseString = None

__version__ = (0, 1, 5)

# check to make sure the '--without-environment' flag is called first
# this could be done in a callback, but we'd have to keep a note of every
# option which is affected by this flag
if '--without-environment' in sys.argv and \
   sys.argv[1] != '--without-environment':
    output = "The '--without-environment' option must come before any "
    print >> sys.stderr, '%s other options.' % output
    sys.exit(1)

# we need to get this in early because callbacks are always called after
# every other option is already set, regardless of when the callback option
# is actually used in the script
if len(sys.argv) > 1 and sys.argv[1] == '--without-environment':
    for k in os.environ.keys():
        if k.startswith('VCPROMPT'):
            del os.environ[k]
    del sys.argv[1]


# user editable options
DEPTH = os.environ.get('VCPROMPT_DEPTH', 0)
FORMAT = os.environ.get('VCPROMPT_FORMAT', '%s:%b')
UNKNOWN = os.environ.get('VCPROMPT_UNKNOWN', '(unknown)')
SYSTEMS = []

# status indicators
STAGED = '*'
MODIFIED = '+'
UNTRACKED = '?'

common_ph_name = 'Common'

placeholders = {
    's'  : ('repository type',       (common_ph_name,)),
    'b'  : ('branch',                (common_ph_name,)),
    'r'  : ('revision',              (common_ph_name,)),
    'h'  : ('revision',              (common_ph_name,)),
    'l'  : ('last changed revision', ('Svn',)),
    'm'  : ('modified flag',         (common_ph_name,)),
    'mc' : ('modified file count',   (common_ph_name,)),
    'u'  : ('untracked flag',        (common_ph_name,)),
    'uc' : ('untracked file count',  (common_ph_name,)),
    'a'  : ('staged flag',           ('Git',)),
    'ac' : ('staged file count',     ('Git',)),
    'sc' : ('stash count',           ('Git',)),
    'tb' : ('tracked branch',        ('Git', 'Hg')),
    'tr' : ('revision of tracked branch', ('Git', 'Hg')),
}

def helper(*args, **kwargs):
    """
    Prints the module's docstring.

    Doing this kills two birds with one stone: it adds PEP 257
    compliance and allows us to stop using optparse's built-in
    help flag.

    """
    print __doc__.strip()
    sys.exit(0)

def helperFormat(*args, **kwargs):
    ' Prints all available placeholders to stdout'

    # group placeholders by scm
    help = {}
    for ph, v  in placeholders.iteritems():
        for cat in v[1]:
            help.setdefault(cat, []).append(ph)

    for cat, j in (sorted(help.items())):
        print '%s:' % cat
        for ph in j:
            print '  %%%-5s%s' % (ph, placeholders[ph][0])
        print
    sys.exit(0)

def systems():
    ' Prints all available systems to stdout'
    for system in SYSTEMS:
        doc = system.__doc__.split('\n')
        name, desc = filter(bool, map(lambda x: x.strip(), doc))
        output = '%s: %s' % (name, desc)
        print output
    sys.exit(0)


def values(option, opt, value, parser, *args, **kwargs):
    """
    Prints the given values to stdout.

    This function is *private* and should not be relied on.
    """
    for option in parser.rargs:
        if option == 'SYSTEMS':
            systems()
        if option in globals().keys():
            print globals()[option]
    sys.exit(0)


def vcs(function):
    """
    Adds the given ``name`` and ``description`` as attributes on the
    wrapped function.

    Arguments:

        ``name``
            The display name for the system. E.g. "Mercurial" or
            "Subversion".

         ``description``
             The description for the system. E.g.:
             "The fast version continue system".

    """
    SYSTEMS.append(function)
    return function


def version(*args):
    ' Convenience function for printing a version number '
    print 'vcprompt %s' % '.'.join(map(str, __version__))
    sys.exit(0)


def vcprompt(options):
    """
    Returns a formatted version control string for use in a shell prompt
    or elsewhere.

    Arguments:

        ``options``
            An optparse.Values instance.

    """
    options.path = os.path.abspath(os.path.expanduser(options.path))
    prompt = None
    count = 0

    while options.path:
        # bail out on non-existant paths
        if not os.path.exists(options.path):
            break

        # We need to change the current working directory or the '--path'
        # flag might not work correctly with some formatting args.
        # It's easier to do this here, rather than in every VCS function
        if options.path != os.getcwd():
            os.chdir(options.path)

        for vcs in SYSTEMS:
            if not options.systems or options.systems and \
                   vcs.__name__ in options.systems:

                # set up custom formatting
                vcs_format = getattr(options, 'format-' + vcs.__name__, None)
                if vcs_format:
                    options.format = vcs_format

                prompt = vcs(options)
                if prompt is not None:
                    return prompt

        if options.depth:
            if count == options.depth:
                break
            count += 1

        options.path = options.path.rsplit('/', 1)[0]
    return ''


def main():
    # parser
    parser = optparse.OptionParser()

    # dump the provided --help option
    parser.remove_option('--help')

    # our own --help flag
    parser.add_option('-h', '--help', action='callback', callback=helper)

    # format --help
    parser.add_option('-t', '--help-format', action='callback', callback=helperFormat)

    # format
    parser.add_option('-f', '--format', dest='format', default=FORMAT)

    # path
    parser.add_option('-p', '--path', dest='path', default='.')

    # max depth
    parser.add_option('-d', '--max-depth', dest='depth', type='int',
                      default=DEPTH)
    # systems
    parser.add_option('-s', '--systems', dest='systems', action='append')

    # unknown
    parser.add_option('-u', '--unknown', dest='unknown', default=UNKNOWN)

    # version
    parser.add_option('-v', '--version', action='callback', callback=version)

    # values
    parser.add_option('--values', dest='values', action='callback',
                      callback=values)

    # vcs-specific formatting
    for system in SYSTEMS:
        default = 'VCPROMPT_FORMAT_%s' % system.__name__.upper()
        default = os.environ.get(default, None)
        dest = 'format-%s' % system.__name__
        flag = '--%s' % dest
        parser.add_option(flag, dest=dest, default=default)


    options, args = parser.parse_args()

    # create a dictionary of all format placeholders
    #ph_re = re.compile('%%(%s)' %  '|'.join(placeholders.keys()))
    #options.format_placeholders = set(ph_re.findall(options.format))

    _ph = {} ; _o = options.format
    for k in placeholders.iterkeys():
        if k in _o: _ph[k] = None

    options.format_placeholders = _ph
    output = vcprompt(options)

    return output


@vcs
def git(options):
    ' Git - the fast version control system '

    file = os.path.join(options.path, '.git/')
    if not os.path.exists(file):
        return None

    def revstring(ref, chars=7):
        sha_file = os.path.join(file, ref)
        if not os.path.exists(sha_file): return ''

        try:
            fh = open(sha_file, 'r')
            for line in fh:
                return line.strip()[0:chars]
        except IOError:
            pass
        return ''

    ph = options.format_placeholders

    staged = branch = tracked_branch \
    = sha = tracked_sha = modified \
    = untracked \
    = options.unknown

    modified_count = untracked_count = staged_count = stashed_count = 0

    # the current branch is required to get the sha
    if 'b' in ph or 'r' in ph or 'h' in ph:
        branch_file = os.path.join(file, 'HEAD')
        try:
            fh = open(branch_file, 'r')
            for line in fh:
                line = line.strip()
                if line.startswith('ref: refs/heads/'):
                    branch = (line.split('/')[-1] or options.unknown)
                    break
        except IOError:
            pass

        # sha/revision
        if ('r' in ph or 'h' in ph) and branch != options.unknown:
            sha = revstring('refs/heads/%s' % branch)

    # modified
    if 'm' in ph:
        command = 'git diff --name-only --diff-filter=M --exit-code'
        ret, out, err = call(command, stdout=PIPE, stderr=PIPE, shell=True)

        modified = ''

        if ret == 1:
            modified = MODIFIED
            modified_count = wcl(out)

    # untracked files
    if 'u' in ph:
        command = ('git', 'ls-files', '--other', '--exclude-standard')
        ret, out, err = call(command, stdout=PIPE, stderr=PIPE)

        untracked = ''

        if ret == 0 and out != '':
            untracked = UNTRACKED
            untracked_count = wcl(out)

    # staged files
    if 'a' in ph:
        command = ('git', 'diff', '--name-only', '--cached')
        ret, out, err = call(command, stdout=PIPE, stderr=PIPE)

        staged = ''

        if ret == 0 and out != '':
            staged = STAGED
            staged_count = wcl(out)

    # tracked branch
    if 'tb' in ph and branch != options.unknown:
        command = ('git', 'for-each-ref', '--format=%(refname:short):%(upstream:short)', 'refs/heads/%s' % branch)
        ret, out, err = call(command, stdout=PIPE, stderr=PIPE)

        if ret == 0:
            out = out.rstrip().split(':')
            if len(out) == 2:
                tracked_branch = out[1]

    # tracked branch revision
    if 'tr' in ph and tracked_branch != options.unknown:
        tracked_sha = revstring('refs/remotes/%s' % tracked_branch)

    # stashed changes count
    if 'sc' in ph:
        command = ('git', 'stash', 'list')
        ret, out, err = call(command, stdout=PIPE, stderr=PIPE)

        if ret == 0 and out != '':
            stashed_count = wcl(out)


    # formatting
    output = options.format
    output = output.replace('%tb', tracked_branch)
    output = output.replace('%b',  branch)

    output = output.replace('%th', tracked_sha)
    output = output.replace('%h',  sha)
    output = output.replace('%tr', tracked_sha)
    output = output.replace('%r',  sha)

    output = output.replace('%mc', str(modified_count))
    output = output.replace('%m',  modified)

    output = output.replace('%uc', str(untracked_count))
    output = output.replace('%u',  untracked)

    output = output.replace('%ac', str(staged_count))
    output = output.replace('%a',  staged)

    output = output.replace('%sc', str(stashed_count))

    output = output.replace('%s', 'git')
    output = output.replace('%n', 'git')
    return output


@vcs
def hg(options):
    'Mercurial - the fast, easy to use, revision control tool'

    file = os.path.join(options.path, '.hg')
    if not os.path.isdir(file):
        return None

    ph = options.format_placeholders

    branch = revision = sha = modified = untracked = options.unknown

    # changeset ID or global sha
    if 'r' in ph or 'h' in ph:
        try:
            fh = open(os.path.join(file, 'tags.cache'), 'r')
            line = fh.readline()
            revision, sha = line.strip().split()
            sha = sha[:7]
        except IOError:
            pass

    # branch
    if 'b' in ph:
        file = os.path.join(options.path, '.hg/undo.branch')
        try:
            fh = open(file, 'r')
            line = fh.readline()
            branch = line.strip()
        except IOError:
            pass

    # modified
    if 'm' in ph:
        command = 'hg status --modified'
        process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
        output = process.communicate()[0].strip()
        returncode = process.returncode

        if returncode == 0:
            if output == '':
                modified = ''
            else:
                modified = MODIFIED

    # untracked
    if 'u' in ph:
        command = 'hg status --unknown'
        process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if output == '':
            untracked = ''
        else:
            untracked = UNTRACKED

    output = options.format
    output = output.replace('%b', branch)
    output = output.replace('%h', sha)
    output = output.replace('%r', revision)
    output = output.replace('%m', modified)
    output = output.replace('%u', untracked)
    output = output.replace('%s', 'hg')
    output = output.replace('%n', 'hg')
    return output


@vcs
def svn(options):
    'The Subversion version control system'

    file = os.path.join(options.path, '.svn/entries')
    if not os.path.exists(file):
        return None

    ph = options.format_placeholders

    branch = revision = last_changed_rev = modified = untracked = options.unknown
    modified_count = untracked_count = 0

    # branch
    command = ('svn', '--non-interactive', 'info', options.path)
    ret, out, err = call(command, stdout=PIPE, stderr=PIPE)

    def findBranch(line):
        s = line.split('/')
        if 'trunk' in s: return 'trunk'

        try:
            i = s.index('branches')
            return s[i+1]
            i = s.index('tags')
            return s[i+1]
        except ValueError:
            return options.unknown

    if ret == 0:
        svninfo = [i.split(': ') for i in out.splitlines() if i]
        svninfo = dict(svninfo)

        if 'b' in ph:
            branch = findBranch(svninfo['URL'])

        if 'r' in ph or 'h' in ph:
            revision = svninfo['Revision']

        if 'l' in ph:
            last_changed_rev = svninfo['Last Changed Rev']


    # modified
    if 'm' in ph or 'u' in ph:
        command = ('svn', '--non-interactive', 'status')
        ret, out, err = call(command, stdout=PIPE, stderr=PIPE)

        if ret == 0:
            modified, untracked = '', ''

            for line in out.splitlines():
                if line.startswith('M'):
                    modified_count += 1
                if line.startswith('?'):
                    untracked_count += 1

        if modified_count  > 0: modified  = MODIFIED
        if untracked_count > 0: untracked = UNTRACKED

    # formatting
    output = options.format
    output = output.replace('%r', revision)
    output = output.replace('%l', last_changed_rev)
    output = output.replace('%h', revision)
    output = output.replace('%b', branch)

    output = output.replace('%mc', str(modified_count))
    output = output.replace('%m',  modified)

    output = output.replace('%uc', str(untracked_count))
    output = output.replace('%u',  untracked)

    output = output.replace('%s', 'svn')
    output = output.replace('%n', 'svn')
    return output


@vcs
def bzr(options):
    'The Bazaar version control system'

    file = os.path.join(options.path, '.bzr/branch/last-revision')
    if not os.path.exists(file):
        return None

    ph = options.format_placeholders

    branch = revision = sha = modified = untracked = options.unknown

    # local revision or global sha
    if 'r' in ph or 'h' in ph:
        try:
            fh = open(file, 'r')
            for line in fh:
                line = line.strip()
                revision, sha = line.split(' ', 1)
                # compensate for empty Bazaar repositories
                if sha == 'null:':
                    sha = unknown
                else:
                    sha = sha.rsplit('-', 1)[-1][:7]
                    break
        except IOError:
            pass

    # status (modified/untracked)
    if 'm' in ph or 'u' in ph:
        command = 'bzr status --short'
        process = Popen(command.split(), stdout=PIPE)
        output = process.communicate()[0].strip()
        returncode = process.returncode

        if returncode == 0:
            if output == '':
                modified = ''
                untracked = ''
            else:
                for line in output.split('\n'):
                    if line.startswith('M'):
                        modified = MODIFIED
                    elif line.startswith('?'):
                        untracked = UNTRACKED


    # formatting
    output = options.format
    output = output.replace('%b', os.path.basename(options.path))
    output = output.replace('%h', sha)
    output = output.replace('%r', revision)
    output = output.replace('%m', modified)
    output = output.replace('%u', untracked)
    output = output.replace('%s', 'bzr')
    output = output.replace('%n', 'bzr')
    return output


@vcs
def cvs(options):
    'CVS - Concurrent Versions System'

    file = os.path.join(options.path, 'CVS/')
    if not os.path.exists(file):
        return None


    output = options.format
    output = output.replace('%b', options.unknown)
    output = output.replace('%h', options.unknown)
    output = output.replace('%r', options.unknown)
    output = output.replace('%m', options.unknown)
    output = output.replace('%s', 'cvs')
    output = output.replace('%n', 'cvs')
    return output


@vcs
def darcs(options):
    'Darcs - Distributed. Interactive. Smart'

    needs_parseString()

    file = os.path.join(options.path, '_darcs/hashed_inventory')
    if not os.path.exists(file):
        return None

    ph = options.format_placeholders

    branch = sha = modified = untracked = options.unknown

    # sha
    if 'h' in ph or 'r' in ph:
        command = 'darcs changes --last 1 --xml'
        process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if returncode == 0:
            dom = parseString(output)
            patch = dom.getElementsByTagName("patch")[0].getAttribute("hash")
            sha = patch.rsplit('-', 1)[-1].split('.')[0][:7]

    # branch
    # darcs doesn't have in-repo local branching (yet), so just use
    # the directory name for now
    # see also: http://bugs.darcs.net/issue555
    branch = os.path.basename(options.path)

    # modified
    if 'm' in ph or 'u' in ph:
        command = 'darcs whatsnew -l -s'
        process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if returncode == 1:
            modified = ''
            untracked = ''
        elif returncode == 0:
            for line in output:
                line = line.strip()
                if line.startswith('M'):
                    modified = MODIFIED
                elif line.startswith('a'):
                    untracked = UNTRACKED


    # formatting
    output = options.format
    output = output.replace('%b', branch)
    output = output.replace('%h', sha)
    output = output.replace('%r', sha)
    output = output.replace('%m', modified)
    output = output.replace('%u', untracked)
    output = output.replace('%s', 'darcs')
    output = output.replace('%n', 'darcs')
    return output


@vcs
def fossil(options):
    """
    Fossil

    The Fossil version control system.
    """

    needs_sqlite3()

    file = os.path.join(options.path, '_FOSSIL_')
    if not os.path.exists(file):
        return None

    ph = options.format_placeholders

    branch = sha = modified = untracked = options.unknown

    # all this just to get the repository file :(
    repository = None
    if sqlite3:
        try:
            conn = None
            try:
                query = "SELECT value FROM vvar where name = 'repository'"
                conn = sqlite3.connect(file)
                c = conn.cursor()
                c.execute(query)
                repository = c.fetchone()[0]
            except sqlite3.OperationalError:
                pass
        finally:
            if conn:
                conn.close()

    # grab the sha from the repo
    if repository is not None and sqlite3:
        try:
            conn = None
            try:
                query = "SELECT uuid from blob ORDER BY rid DESC LIMIT 1"
                conn = sqlite3.connect(repository)
                c = conn.cursor()
                c.execute(query)
                sha = c.fetchone()[0][:7]
            except sqlite3.OperationalError:
                pass
        finally:
            if conn:
                conn.close()

    # branch
    if sha != options.unknown and sqlite3:
        try:
            conn = None
            try:
                query = """SELECT value FROM tagxref WHERE rid =
                           (SELECT rid FROM blob WHERE uuid LIKE '%s%%')
                           AND value is not NULL LIMIT 1 """ % sha
                conn = sqlite3.connect(repository)
                c = conn.cursor()
                c.execute(query)
                branch = c.fetchone()[0]
            except (sqlite3.OperationalError, TypeError):
                pass
        finally:
            if conn:
                conn.close()

    # modified
    if 'm' in ph:
        command = 'fossil changes'
        process = Popen(command.split(), stdout=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if returncode == 0:
            if output:
                modified = MODIFIED
            else:
                modified = ''

    # untracked files
    if 'u' in options.format:
        command = 'fossil extras'
        process = Popen(command.split(), stdout=PIPE)
        output = process.communicate()[0]
        returncode = process.returncode

        if returncode == 0:
            if output:
                untracked = UNTRACKED
            else:
                untracked = ''

    # parse out formatting string
    output = options.format
    output = output.replace('%b', branch)
    output = output.replace('%h', sha)
    output = output.replace('%r', sha)
    output = output.replace('%m', modified)
    output = output.replace('%u', untracked)
    output = output.replace('%s', 'fossil')
    output = output.replace('%n', 'fossil')
    return output


# utility functions
def needs_sqlite3():
    global sqlite3
    if sqlite3: return

    try:
        import sqlite3
    except ImportError:
        try:
            from pysqlite2 import dbapi2 as sqlite3
        except ImportError:
            pass

def needs_parseString():
    global parseString
    if not parseString:
        from xml.dom.minidom import parseString

def call(*args, **kwargs):
    process = Popen(*args, **kwargs)
    stdout, stderr = process.communicate()
    returncode = process.returncode

    return returncode, stdout, stderr

def wcl(text, chomp=True):
    s = text.split(os.linesep)
    if chomp: s = [s for s in s if s]
    return len(s)


if __name__ == '__main__':
    prompt = main()
    if prompt: print prompt
    else: sys.exit(1)
